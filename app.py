# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-2DBWw3V4Z2gEhqeemT3Pd-uKv8HuHJC
"""

from flask import Flask, render_template, Response
import cv2
import os
face_cascade = cv2.CascadeClassifier("haarcascade_frontalface_default.xml") 
  

eye_cascade = cv2.CascadeClassifier("haarcascade_eye_tree_eyeglasses.xml")

app = Flask(__name__)

camera = cv2.VideoCapture(0)  # use 0 for web camera
#  for cctv camera use rtsp://username:password@ip_address:554/user=username_password='password'_channel=channel_number_stream=0.sdp' instead of camera
# for local webcam use cv2.VideoCapture(0)



def gen_frames_2():  
    while True:
        success, frame = camera.read()  # read the camera frame
        if not success:
            break
        else:
                        # convert to gray scale of each frames 
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) 

            # Detects faces of different sizes in the input image 
            faces = face_cascade.detectMultiScale(gray, 1.3, 5) 

            for (x,y,w,h) in faces: 
                # To draw a rectangle in a face  
                cv2.rectangle(frame,(x,y),(x+w,y+h),(255,255,0),2)  
                roi_gray = gray[y:y+h, x:x+w] 
                roi_color = frame[y:y+h, x:x+w] 
            
                # Detects eyes of different sizes in the input image 
                eyes = eye_cascade.detectMultiScale(roi_gray)  
            
                #To draw a rectangle in eyes 
                for (ex,ey,ew,eh) in eyes: 
                    cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,127,255),2) 
            ret, buffer = cv2.imencode('.jpg', frame)
            frame = buffer.tobytes()
            yield (b'--frame\r\n'b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')  # concat frame one by one and show result


@app.route('/video_feed')
def video_feed():
    #Video streaming route. Put this in the src attribute of an img tag
    
    return Response(gen_frames_2(), mimetype='multipart/x-mixed-replace; boundary=frame')


@app.route('/')
@app.route('/index')
def index():
    """Video streaming home page."""
    return render_template('index.html')


if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(port=port)
    app.run(host='0.0.0.0')
